buildscript {//properties that you need to build the project
    Properties constants = new Properties()
    file("$projectDir/./constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        quasar_version = constants.getProperty("quasarVersion")
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        //springboot
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda-releases' }
    }

    dependencies {
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

allprojects {//Properties that you need to compile your project (The application)
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'java'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required by Corda's serialisation framework.
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}
//Module dependencis
dependencies {
    // Corda dependencies.
    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp project(":workflows")
    cordapp project(":contracts")

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"

    cordaDriver "org.postgresql:postgresql:42.1.4"
}

cordapp {
    info {
        name "DockerForm Docchain Cordapp"
        vendor "Corda Open Source"
        targetPlatformVersion corda_platform_version
        minimumPlatformVersion corda_platform_version
    }
}

task prepareDockerNodes(type: net.corda.plugins.Dockerform, dependsOn: ['jar']) {

    dockerImage = "corda/corda-zulu-java1.8-" + corda_release_version + ":latest"

    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project("contracts")
        cordapp project("workflows")
        runSchemaMigration = true
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10001
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10011")
            adminAddress("0.0.0.0:10041")
        }
        sshdPort 2221
    }

    node {
        name "CN=PartyA,O=PartyA,L=Boston,C=US"
        p2pPort 10002
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10012")
            adminAddress("0.0.0.0:10042")
        }
        extraConfig = [
                "dataSourceProperties.dataSourceClassName": "e",
                "dataSourceProperties.dataSource.url"     : "jdbc:postgresql://34.95.200.167:5432/postgres?sslmode=require",
                "dataSourceProperties.dataSource.user"    : 'partya',
                "dataSourceProperties.dataSource.password": 'docchain@2021',
                "jarDirs"                                 :["../../../drivers"]
        ]
        //drivers = ["${rootProject.projectDir}/drivers"]
        sshdPort 2222
    }

    node {
        name "CN=PartyB,O=PartyB,L=Boston,C=US"
        p2pPort 10003
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10013")
            adminAddress("0.0.0.0:10043")
        }
        extraConfig = [
                "dataSourceProperties.dataSourceClassName": "org.postgresql.ds.PGSimpleDataSource",
                "dataSourceProperties.dataSource.url"     : "jdbc:postgresql://34.95.200.167:5432/postgres?sslmode=require",
                "dataSourceProperties.dataSource.user"    : 'partyb',
                "dataSourceProperties.dataSource.password": 'docchain@2021',
                "jarDirs"                                 : ["../../../drivers"]
        ]
        //drivers = ["${rootProject.projectDir}/drivers"]
        sshdPort 2223
    }

    node {
        name "CN=PartyC,O=PartyC,L=Boston,C=US"
        p2pPort 10004
        p2pAddress "0.0.0.0"
        rpcSettings {
            address("0.0.0.0:10014")
            adminAddress("0.0.0.0:10044")
        }
        extraConfig = [
                "dataSourceProperties.dataSourceClassName": "org.postgresql.ds.PGSimpleDataSource",
                "dataSourceProperties.dataSource.url"     : "jdbc:postgresql://34.95.200.167:5432/postgres?sslmode=require",
                "dataSourceProperties.dataSource.user"    : 'partyc',
                "dataSourceProperties.dataSource.password": 'docchain@2021',
                "jarDirs"                                 : ["../../../drivers"]
        ]
        //drivers = ["${rootProject.projectDir}/drivers"]
        sshdPort 2224
    }
}

//Task to deploy the nodes in order to bootstrap a network
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {

    /* This property will load the CorDapps to each of the node by default, including the Notary. You can find them
     * in the cordapps folder of the node at build/nodes/Notary/cordapps. However, the notary doesn't really understand
     * the notion of cordapps. In production, Notary does not need cordapps as well. This is just a short cut to load
     * the Corda network bootstrapper.
     */
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':contracts')
        cordapp project(':workflows')
        //runSchemaMigration = true //This configuration is for any CorDapps with custom schema, We will leave this as true to avoid
        //problems for developers who are not familiar with Corda. If you are not using custom schemas, you can change
        //it to false for quicker project compiling time.
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
    }
    node {
        name "CN=PartyA,O=PartyA,L=Boston,C=US"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        extraConfig = [
                "dataSourceProperties.dataSourceClassName": "org.postgresql.ds.PGSimpleDataSource",
                "dataSourceProperties.dataSource.url"     : "jdbc:postgresql://34.95.200.167:5432/postgres?sslmode=require",
                "dataSourceProperties.dataSource.user"    : 'partya',
                "dataSourceProperties.dataSource.password": 'docchain@2021',
                "jarDirs"                                 :["../../../drivers"]
        ]
    }
    node {
        name "CN=PartyB,O=PartyB,L=Boston,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        extraConfig = [
                "dataSourceProperties.dataSourceClassName": "org.postgresql.ds.PGSimpleDataSource",
                "dataSourceProperties.dataSource.url"     : "jdbc:postgresql://34.95.200.167:5432/postgres?sslmode=require",
                "dataSourceProperties.dataSource.user"    : 'partyb',
                "dataSourceProperties.dataSource.password": 'docchain@2021',
                "jarDirs"                                 : ["../../../drivers"]
        ]
    }
    node {
        name "CN=PartyC,O=PartyC,L=Boston,C=US"
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
        extraConfig = [
                "dataSourceProperties.dataSourceClassName": "org.postgresql.ds.PGSimpleDataSource",
                "dataSourceProperties.dataSource.url"     : "jdbc:postgresql://34.95.200.167:5432/postgres?sslmode=require",
                "dataSourceProperties.dataSource.user"    : 'partyc',
                "dataSourceProperties.dataSource.password": 'docchain@2021',
                "jarDirs"                                 : ["../../../drivers"]
        ]
    }
}
